{"version":3,"file":"scripts/updateYtbPlayerCurrentQuality.js","mappings":"MAaA,MACMA,EAAkB,SAgBxB,IAAIC,EAAsC,KACtCC,EAAmC,KAEvC,MAAMC,EAAuC,CAC3C,SACA,QACA,QACA,SACA,QACA,QAmEF,SAASC,IACP,MAAMC,EAASC,SAASC,eACtB,gBAGF,IAAKF,IAAWJ,EAAa,OAE7B,MAAMO,GAAUH,aAAAA,EAAAA,EAAQI,uBAAwBT,EAGtB,IACxBK,EACAA,GAFoB,IAFDF,EAAaO,QAAQF,KAGf,QAAzBH,EAAAA,EAAOM,0BAAPN,IAAAA,GAAAA,EAAAA,KAAAA,EAA4BJ,GACE,QAA9BI,EAAAA,EAAOO,+BAAPP,IAAAA,GAAAA,EAAAA,KAAAA,EAAiCJ,GACjCY,QAAQC,KACN,wCAAwCN,QAAcP,KAG5D,CAnDAc,OAAOC,iBAAiB,UAAW,IACjC,GACEC,EAAMC,SAAWH,SAChBE,EAAME,MA9De,uBA+DtBF,EAAME,KAAKD,OAEX,OAEF,MAAMb,EAASC,SAASC,eACtB,gBAGF,GAAKF,EAAL,CAEA,GAAmB,gBAAfY,EAAME,KAAKC,KAA0C,CAAC,IACtCf,EAAlB,MAAMgB,GAA4C,QAAhChB,EAAAA,EAAOiB,iCAAPjB,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,KAAwC,GACpDkB,EAAiBlB,EAAOI,sBAAwBT,EAChDwB,EApCV,SACEC,GAEA,MAIMC,EAJuBD,EAAUE,OACrC,IAAcC,EAAQC,WAAW,SAGWF,OAAO,IACnD,MAAMG,EAAQ3B,EAAaO,QAAQkB,GACnC,OAAkB,IAAXE,GAAgBA,GAAS3B,EAAaO,QAAQV,KAGjDwB,EAAOrB,EAAa4B,KAAK,GAC7BL,EAAiBM,SAASJ,IAG5B,OAAOJ,QAAAA,EAAQ,IACjB,CAmBiBS,CAAkBZ,GACzBa,EAAe/B,EAAaO,QAAQa,GAER,IAEhClB,EACAA,EAHEmB,IAA0B,IAAlBU,IACVjC,EAAcuB,EACW,QAAzBnB,EAAAA,EAAOM,0BAAPN,IAAAA,GAAAA,EAAAA,KAAAA,EAA4BmB,GACE,QAA9BnB,EAAAA,EAAOO,+BAAPP,IAAAA,GAAAA,EAAAA,KAAAA,EAAiCmB,GA+BX,OAAtBtB,IAEJA,EAAoBa,OAAOoB,YACzB/B,EAlHqC,KAqHvCS,QAAQC,KAAK,+CAlCb,CAEmB,0BAAfG,EAAME,KAAKC,OAoCW,OAAtBlB,IACFkC,cAAclC,GACdA,EAAoB,KACpBW,QAAQC,KAAK,+CArCbb,EAAc,KAlBG,G","sources":["webpack://vpnn-extension/./scripts/updateYtbPlayerCurrentQuality.ts"],"sourcesContent":["/**\n * Этот файл компилируется в js стандарными инструментами ts\n * поэтому в нем не должно быть импортов или экспортов\n *\n * Типы указанные в этом файле должны дублировать типы\n * указанные в файлe src/content/scripts/youtubeRestrictionQuality/ytbRestrictionQuality.ts\n */\n\nenum YTbPlayerActions {\n  'set-quality' = 'SET_QUALITY',\n  'stop-restrict-quality' = 'STOP_RESTRICT_QUALITY',\n}\n\nconst YTB_SCRIPT_SOURCE = 'ytb-quality-script';\nconst DEFAULT_QUALITY = 'hd1080' as YTbQualityLevel;\nconst ENFORCING_QUALITY_CHECK_INTERVAL = 60000;\n\ntype YTbQualityLevel =\n  | 'highres'\n  | 'hd2880'\n  | 'hd2160'\n  | 'hd1440'\n  | 'hd1080'\n  | 'hd720'\n  | 'large'\n  | 'medium'\n  | 'small'\n  | 'tiny'\n  | 'auto';\n\nlet bestQuality: YTbQualityLevel | null = null;\nlet enforceIntervalId: number | null = null;\n\nconst qualityOrder: Array<YTbQualityLevel> = [\n  'hd1080',\n  'hd720',\n  'large',\n  'medium',\n  'small',\n  'tiny',\n];\n\ninterface YTbPlayer {\n  // Качество\n  getAvailableQualityLevels(): YTbQualityLevel[];\n  setPlaybackQuality(quality: YTbQualityLevel): void;\n  setPlaybackQualityRange?(quality: YTbQualityLevel): void;\n  getPlaybackQuality(): YTbQualityLevel;\n\n  // Прочее (по необходимости)\n  [key: string]: any;\n}\n\nfunction selectBestQuality(\n  available: YTbQualityLevel[],\n): YTbQualityLevel | null {\n  const qualitiesWithoutAuto = available.filter(\n    (quality) => !quality.startsWith('auto'),\n  );\n\n  const allowedQualities = qualitiesWithoutAuto.filter((quality) => {\n    const index = qualityOrder.indexOf(quality);\n    return index !== -1 && index <= qualityOrder.indexOf(DEFAULT_QUALITY);\n  });\n\n  const best = qualityOrder.find((quality) =>\n    allowedQualities.includes(quality),\n  );\n\n  return best ?? null;\n}\n\nwindow.addEventListener('message', (event) => {\n  if (\n    event.source !== window ||\n    !event.data ||\n    event.data.source !== YTB_SCRIPT_SOURCE\n  )\n    return;\n\n  const player = document.getElementById(\n    'movie_player',\n  ) as unknown as YTbPlayer;\n\n  if (!player) return;\n\n  if (event.data.type === YTbPlayerActions['set-quality']) {\n    const qualities = player.getAvailableQualityLevels?.() || [];\n    const currentQuality = player.getPlaybackQuality() || DEFAULT_QUALITY;\n    const best = selectBestQuality(qualities);\n    const currentIndex = qualityOrder.indexOf(currentQuality);\n\n    if (best && currentIndex === -1) {\n      bestQuality = best;\n      player.setPlaybackQuality?.(best);\n      player.setPlaybackQualityRange?.(best);\n      startEnforcing();\n    }\n  }\n\n  if (event.data.type === YTbPlayerActions['stop-restrict-quality']) {\n    stopEnforcing();\n    bestQuality = null;\n  }\n});\n\nfunction enforceQuality() {\n  const player = document.getElementById(\n    'movie_player',\n  ) as unknown as YTbPlayer;\n\n  if (!player || !bestQuality) return;\n\n  const current = player?.getPlaybackQuality() || DEFAULT_QUALITY;\n  const currentIndex = qualityOrder.indexOf(current);\n\n  if (currentIndex === -1) {\n    player.setPlaybackQuality?.(bestQuality);\n    player.setPlaybackQualityRange?.(bestQuality);\n    console.warn(\n      `[Ytb Enforcer] Reverted quality from ${current} to ${bestQuality}`,\n    );\n  }\n}\n\nfunction startEnforcing() {\n  if (enforceIntervalId !== null) return;\n\n  enforceIntervalId = window.setInterval(\n    enforceQuality,\n    ENFORCING_QUALITY_CHECK_INTERVAL,\n  );\n  console.warn('[Ytb Enforcer] Started quality enforcement');\n}\n\nfunction stopEnforcing() {\n  if (enforceIntervalId !== null) {\n    clearInterval(enforceIntervalId);\n    enforceIntervalId = null;\n    console.warn('[Ytb Enforcer] Stopped quality enforcement');\n  }\n}\n"],"names":["DEFAULT_QUALITY","bestQuality","enforceIntervalId","qualityOrder","enforceQuality","player","document","getElementById","current","getPlaybackQuality","indexOf","setPlaybackQuality","setPlaybackQualityRange","console","warn","window","addEventListener","event","source","data","type","qualities","getAvailableQualityLevels","currentQuality","best","available","allowedQualities","filter","quality","startsWith","index","find","includes","selectBestQuality","currentIndex","setInterval","clearInterval"],"sourceRoot":""}